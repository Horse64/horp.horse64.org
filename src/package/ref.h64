## @module package.ref
# Copyright (c) 2020-2024, ellie/@ell1e & Horp Team (see AUTHORS.md).
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
# 1. Redistributions of source code must retain the above copyright notice,
#    this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright notice,
#    this list of conditions and the following disclaimer in the documentation
#    and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.
#
# Alternatively, at your option, this file is offered under the Apache 2
# license, see accompanied LICENSE.md.

import confparse from core.horse64.org
import io from core.horse64.org
import math from core.horse64.org
import net from core.horse64.org
import path from core.horse64.org
import system from core.horse64.org
import uri from core.horse64.org

import constraint
import limit
import package
import package.servermeta as servermeta

const version_comp_tokens = {
    "==", ">=", "<=", "!=", ">", "<"
}

type PackageRef {
    var package_name
    var constraints
    var location
}

func PackageRef.copy {
    var new_ref = PackageRef(
        self.package_name, self.constraints,
        self.location
    )
    return new_ref
}

func PackageRef.init(pkgname, constraints, location) {
    if pkgname != none and pkgname.has("/") {
        throw new ValueError("Invalid package name: " + pkgname)
    }
    if location != none and not location.has("://") {
        throw new ValueError("Invalid location: " + location)
    }
    if location == none and pkgname == none {
        throw new ValueError("Must have either package "
            "name or location.")
    }
    self.location = location
    self.package_name = pkgname
    self.constraints = constraints
}

func PackageRef.as_str() {
    var t = "PackageRef("
    if self.package_name != none {
        t += "package_name='" +
            self.package_name + "'"
    }
    if self.location != none {
        if not t.endswith("(") {
            t += ","
        }
        t += "location='" +
            self.location + "'"
    }
    t += ",constraints=" +
        self.constraints.as_str()
    return t + ")"
}

type PackageNameWithConstraints {
    var orig_str
    var package_ref
    var constraints
}

func PackageNameWithConstraints.init(
        pkgname_or_ref, constraints, orig_str=none) {
    self.package_ref = pkgname_or_ref
    self.constraints = constraints
    self.orig_str = orig_str
}

func get_first_comparable_pos(s) {
    var comp_pos = none
    for comp in version_comp_tokens {
        var new_comp_pos = s.find(comp)
        if comp_pos == none or
                (new_comp_pos != none and
                new_comp_pos < comp_pos) {
            comp_pos = new_comp_pos
        }
    }
    return comp_pos
}

func get_package_ending_space(s) {
    if typename(s) != "str" {
        return none
    }

    # A helper function to get the first maybe-package-name in a string:
    func guess_first_pkg_name(s) {
        var hadnonspace = no
        i = 2
        while i <= s.len {
            if s[i] == " " and not hadnonspace {
                i += 1
                continue
            }
            hadnonspace = yes
            if {" ", "@", ";", "!", "=", ">", "<"}.has(s[i]) {
                return s.sub(1, i - 1)
            }
            i += 1
        }
        return s
    }

    var last_start = 1
    var seen_nonspace_in_last = no
    var seen_dot_in_last = no
    var seen_path_sep_in_last = no
    i = 1
    while i <= s.len {
        if s[i] == " " {  # See if we must stop here!
            #print([s, i, seen_nonspace_in_last,
            #    seen_path_sep_in_last, seen_dot_in_last])
            var followup_name = guess_first_pkg_name(s.sub(i + 1))
            var current_name = s.sub(last_start, i - 1)

            # See if this looks like a space IN a path (=continue),
            # or like a space between package names (=abort):
            if (not seen_nonspace_in_last or
                    seen_path_sep_in_last or
                    not seen_dot_in_last or
                    package.normalize_package_name(
                    s.sub(last_start, i - 1)) == none) and
                    # ...contra cases where it's clearly not resuming:
                    package.normalize_package_name(
                        followup_name) == none and
                    not followup_name.has("://") and
                    not current_name.has("://") and
                    not current_name.endswith("/") and
                    current_name != "." and
                    current_name != "./" and
                    (system.osname.lower() != "windows" or (
                     not s.sub(last_start, i - 1).endswith("\\") and
                     current_name != "\\")) {
                # This is likely a resuming whitespace, inside
                # a path name that continues:
                seen_nonspace_in_last = no
                seen_dot_in_last = no
                seen_path_sep_in_last = no
                last_start = i + 1
                i += 1
                continue
            }
            # If we reach this, it's a separating whitespace.
            return i
        }
        # Track a few things:
        if s[i] != " " {
            seen_nonspace_in_last = yes
            if s[i] == "." {
                seen_dot_in_last = yes
            }
            if s[i] == "/" or (
                    system.osname.lower() == "windows" and
                    s[i] == "\\") {
                seen_path_sep_in_last = yes
            }
        }
        i += 1
    }
    return none
}

func extract_first_pkgname_with_constraints(s) {
    # Prepare string to be in required format:
    if typename(s) != "str" {
        return none
    }
    var orig_s = s
    var leading_space_trimmed = (s.len - s.trim().len)
    s = s.replace("\r", " ").replace("\n", " ").
        replace("\t", " ").trim()

    # See where the first constraint starts, if any:
    var comp_pos = get_first_comparable_pos(s)

    # Some obvious bail out cases:
    if s.startswith("@") or comp_pos == 1 or
            s.startswith("=") or
            s.startswith(";") {
        return none
    }

    # Extract package name before constraints:
    var pkgname_or_ref = none
    if comp_pos != none {
        pkgname_or_ref = s.sub(1, comp_pos - 1).trim()
    } else {
        pkgname_or_ref = s.trim()
    }
    var space_pos = get_package_ending_space(pkgname_or_ref)
    if space_pos != none {
        # Everything past the space might be different packages.
        # Only extract the first one:
        pkgname = pkgname.sub(1, space_pos)
        comp_pos = none
    }
    if not pkgname_or_ref.ends(".zip") and
            not pkgname_or_ref.has("/") and
            not pkgname_or_ref.startswith(".") and
            (system.osname.lower() != "windows" or
            not pkgname_or_ref.has("\\")) {
        # Package name is not a path, so validate it:
        pkgname_or_ref = package.
            normalize_package_name(pkgname_or_ref)
        if pkgname_or_ref == none {
            return none
        }
    }
    if comp_pos == none {
        # No constraints at all, so we arrived at the end:
        if space_pos == none {
            return PackageNameWithConstraints(
                pkgname_or_ref, [], orig_str=orig_s)
        } else {
            return new PackageNameWithConstraints(
                pkgname_or_ref, [], orig_str=orig_s.sub(1,
                    leading_space_trimmed + space_pos - 1))
        }
    }

    # Okay, now go through all appended constraints:
    var constraints = []
    while comp_pos != none {
        # See where this constraint ends:
        var pos_past_comp = comp_pos + 1
        if pos_past_comp <= s.len and
                s[pos_past_comp] == "=" {
            pos_past_comp += 1
        }
        var past_constraint_pos = pos_past_comp
        var constraint_opstr = s.sub(comp_pos, pos_past_comp - 1)

        # First, skip all whitespace in front of the constraint arg:
        while past_constraint_pos <= s.len and
                s[past_constraint_pos] == " " {
            past_constraint_pos += 1
        }
        # Then, process non-whitespace that is the constraint arg:
        var constraint_arg_start = past_constraint_pos
        while past_constraint_pos <= s.len and
                (not {" ", ";", "=", "!", "@"}.has(
                    s[past_constraint_pos])) {
            past_constraint_pos += 1
        }
        var constraint_arg = s.sub(
            constraint_arg_start, past_constraint_pos - 1)
        # Then, skip all trailing whitespace after constraint arg:
        while past_constraint_pos <= s.len and
                s[past_constraint_pos] == " " {
            past_constraint_pos += 1
        }
        if constraint_arg.len > 0 {
            var constraint_op =
                constraint.op_from_str(constraint_opstr)
            if constraint_op == none {
                return none
            }
            constraints.add(new constraint.Constraint(
                constraint_op, constraint_arg))
        }

        # See whether a constraint follows:
        if past_constraint_pos > s.len or
                s[past_constraint_pos] != ";" or
                get_first_comparable_pos(
                s.sub(past_constraint_pos + 1).trim()) == none {
            # Whatever follows, not a valid chained constraint.
            # So we're done!
            var entire_parsed_len =
                leading_space_trimmed + past_constraint_pos - 1
            if past_constraint_pos <= s.len and
                    s[past_constraint_pos] == ";" {
                entire_parsed_len += 1
            }
            return new PackageNameWithConstraints(
                pkgname_or_ref, constraints,
                orig_str=orig_s.sub(1, entire_parsed_len))
        }

        # Advance to next constraint to do another extract loop:
        assert(s[past_constraint_pos] == ";")
        var i = past_constraint_pos + 1
        var new_comp_pos = get_first_comparable_pos(s.sub(i))
        assert(new_comp_pos != none)
        comp_pos = new_comp_pos + (i - 1)
        assert({">", "<", "!", "="}.has(s[comp_pos]))
    }
}

func parse_package_refs(refstr) {
    if typename(refstr) != "str" {
        return none
    }

    var refs = []

    refstr = refstr.trim()
    while refstr.len > 0 {
        # Extract the next package name/dir name with constraints:
        result = extract_first_pkgname_with_constraints(refstr)
        if result == none {
            var range_end = math.min(20, math.max(0, refstr.len - 2))
            var dotdotdot = ""
            if range_end < refstr.len {
                dotdotdot = "..."
            }
            throw new ValueError(
                "Failed to parse package ref starting with: " +
                refstr.sub(1, range_end) + dotdotdot
            )
        }
        assert(result.orig_str != none and result.orig_str.len > 0)

        # Now check if there's an '@', which is not always allowed:
        var package_name = result.package_ref
        var location = none
        refstr = refstr.sub(result.orig_str.len + 1).trim()
        if package.normalize_package_name(package_name) == none {
            location = package_name
            package_name = none
            if refstr.startswith("@") {
                throw new ValueError(
                    "Encountered invalid location '@', can't have "
                    "a location for any URI or dir package ref. "
                    "It occurs after: " + result.orig_str
                )
            }
        }
        if refstr.startswith("@") {
            # Extract location URI specified after '@':
            refstr = refstr.sub(2).trim()
            var pos = get_package_ending_space(refstr)
            location = refstr
            if pos != none {
                location = location.sub(1, pos - 1).trim()
                refstr = refstr.sub(pos)
            }

            # It can't be something super invalid:
            if location == "" or {";", "?", "!"}.has(location) {
                throw new ValueError(
                    "Encountered invalid location after '@', "
                    "specified after this package ref: " +
                    result.orig_str
                )
            }
        }
        # Make sure location is an URI in an expected format:
        if location != none and not location.has("://") {
            var fwslash_pos = location.find("/")
            var maybe_host_part = none
            if fwslash_pos != none {
                maybe_host_part = location.sub(
                    1, fwslash_pos - 1
                )
            }
            if maybe_host_part != none and
                    maybe_host_part.has(".") and
                    not maybe_host_part.starts(".") and
                    not maybe_host_part.has(" ") {
                location = "https://" + location
            } else {
                location = uri.from_disk_path(location)
            }
        }
        if location != none {
            location = uri.normalize(location)
        }

        # Make sure we're not using some invalid constraint:
        do {
            constraint.verify_constraints_for_versions(
                result.constraints
            )
        } rescue ValueError as e {
            throw new ValueError("Problem with package '" +
                result.package_ref.as_str() + "': " + e.msg)
        }

        # Assemble and collect result:
        refs.add(new PackageRef(package_name, result.constraints,
            location))
    }
    return refs
}

func populate_package_refs_with_info(refs, verbose=no) {
    if refs.len == 0 {
        return yes
    }
    var refs_queue = refs.copy()

    var next_ref = refs_queue.pop()

    # Populate location if possible:
    var success = populate_single_ref_location(
        next_ref, verbose=verbose
    ) later:

    await success
    if not success {
        return no
    }

    # Populate name of package ref is possible:
    success = populate_single_ref_name(
        next_ref, verbose=verbose
    ) later:

    await success
    if not success {
        return no
    }

    # If our queue is done, exit:
    if refs_queue.len == 0 {
        return yes
    }

    # Continue with next queue item:
    next_ref = refs_queue.pop()
    success = populate_single_ref_location(
        next_ref, verbose=verbose
    ) later repeat
}

func populate_single_ref_location(ref, verbose=no) {
    if ref.location != none {
        return yes
    }
    if ref.location == none and
            ref.package_name == none {
        return no
    }
    var metainfo =
        servermeta.get_servermeta_info_by_package_name(
            ref.package_name, verbose=verbose
        ) later:
    await metainfo

    var source = metainfo.get_package_source(ref.package_name)
    if verbose {
        print("horp: verbose: Obtained source for \"" +
            ref.package_name + "\": " + source.as_str())
    }
    if source != none {
        ref.location = source
        return yes
    }
    return no
}

func populate_single_ref_name(ref, verbose=no) {
    if ref.location == none or
            ref.package_name != none {
        return yes
    }
    var pkg_uri = ref.location
    var uri_protocol = uri.get_protocol(pkg_uri)
    if not {"file", "vfs"}.has(uri_protocol.lower()) {
        return yes
    }
    var horp_conf_uri = uri.add_part(pkg_uri, "horp.conf")
    var horp_conf_path = path.join(
        uri.to_file_or_vfs_path(pkg_uri), "horp.conf")
    var is_vfs = (uri_protocol.lower() == "vfs")

    var exists = io.exists(horp_conf_path,
        allow_vfs=is_vfs, allow_disk=not is_vfs) later:

    await exists
    if not exists {
        return no
    }
    var contents = net.fetch.get_str(
        horp_conf_uri,
        max_size=limit.conf_file_max_bytes,
        allow_vfs=is_vfs, allow_disk=not is_vfs
    ) later:

    await contents
    var conf_contents = confparse.parse_str(
        contents, allow_multiline=yes,
        allow_multiassign=yes,
        error_on_mistakes=no
    )

    if conf_contents == none or
            not conf_contents.has("package") {
        return no
    }
    if not conf_contents["package"].has("name") {
        return no
    }
    ref.package_name = conf_contents["package"]["name"]
    return yes
}

func parse_and_populate_package_refs(refs, verbose=verbose) {
    var parsed_refs = parse_package_refs(refs)
    if verbose {
        print("horp: verbose: "
            "parse_and_locate_package_refs(): populating "
            "these refs now... -> " + parsed_refs.as_str())
    }
    var success = populate_package_refs_with_info(
        parsed_refs, verbose=verbose
    ) later:

    await result
    if not success {
        throw new ValueError(
            "The refs could be parsed, but no package info "
            "extracted from at least one of the given locations."
        )
    }
    return parsed_refs
}

func print_files_list_from_ref(ref, allow_vfs=yes,
        allow_disk=yes, limit_to_kind=none,
        code_with_templates=yes, verbose=no) {
    var pkg_uri = ref.location
    if pkg_uri == none {
        return no
    }
    var prot = uri.get_protocol(pkg_uri)
    if not {"file", "vfs"}.has(prot.lower()) {
        return no
    }
    var pkg_path = uri.to_file_or_vfs_path(pkg_uri)
    func callback(rel_path) {
        print(rel_path)
        return later none
    }
    # XXX Important: Even for a vfs:// URI, allow_disk=yes should
    # be true, and same for file:// with allow_vfs. This is so
    # users can have a package partially made up by both disk
    # and vfs files.
    var result = package.do_for_all_files(
        callback, pkg_path, limit_to_kind=limit_to_kind,
        code_with_templates=code_with_templates,
        allow_vfs=allow_vfs,
        allow_disk=allow_disk, verbose=verbose) later:
    await result
    return result
}

