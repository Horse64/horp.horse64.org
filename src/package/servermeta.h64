# @module package.servermeta
# Copyright (c) 2020-2022,  ellie/@ell1e & Horse64 Team (see AUTHORS.md).
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
# 1. Redistributions of source code must retain the above copyright notice,
#    this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright notice,
#    this list of conditions and the following disclaimer in the documentation
#    and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.
#
# Alternatively, at your option, this file is offered under the Apache 2
# license, see accompanied LICENSE.md.

import net from core.horse64.org
import net.fetch from core.horse64.org

import package


func get_possible_package_hosts(
        package_name, callback, verbose=no
        ) {
    # Assemble host name candidates:
    var host_candidates = [package_name]
    var shorter_name = package_name
    while yes {
        var result =
            package.remove_subdomain_from_package(shorter_name)
        if result == none {
            break
        }
        assert(result != package_name)
        shorter_name = result
        if shorter_name != package_name {
            host_candidates.append(shorter_name)
        }
    }

    # See if we can use any of them:
    if verbose {
        print("horp: debug: get_possible_package_hosts(): "
            "will now look up these hosts: " +
            host_candidates.as_str())
    }
    net.lookup_name(host_candidates, func (err, ips) {
        if err != none {
            if verbose {
                print("horp: debug: get_possible_package_hosts(): "
                    "resolver failure")
            }
            return callback(err, none)
        }
        var result = []
        for candidate in host_candidates {
            if ips[candidate].len > 0 {
                result.append(candidate)
            }
        }
        if result.len > 0 {
            if verbose {
                print("horp: debug: get_possible_package_hosts(): "
                    "lookups complete, some successful")
            }
            return callback(none, result)
        }
        var resulterr = new ValueError("No associated "
            "hostname found.")
        return callback(resulterr, none)
    }, retries=3, retry_delay=0.5)
}


func host_to_package_uri(h) {
    if typename(h) == bytes {
        h = h.as_str()
    }
    if typename(h) != "str" or h.contains("/") or
            h.contains("://") or not h.contains(".") {
        throw new ValueException("Not a valid host.")
    }
    return "https://" + h + "/.well-known/horp-package-info/horp.ini"
}


func get_package_servermeta_ini(
        package_name, callback, verbose=no
        ) {
    get_possible_package_hosts(packagename, func(err, hosts) {
        if err != none {
            return callback(err, none)
        }
        var query_uris = []
        for host in hosts {
            query_uris.add(host_to_package_uri(host))
        }
        if verbose {
            print("horp: debug: get_package_servermeta_ini(): "
                "will consecutively try " +
                query_uris.len.as_str() + " URI(s)...")
        }
        query_uris.reverse()

        func try_next_uri {
            var next_uri = query_uris.pop()

            if verbose {
                print("horp: debug: get_package_servermeta_ini(): "
                    "trying next URI: " +
                    next_uri)
            }
            net.fetch.as_str(next_uri, func (err, result) {
                if err != none {
                    if query_uris.len == 0 {
                        # None left to try. Just spit out the error:
                        if verbose {
                            print("horp: debug: "
                                "get_package_servermeta_ini(): "
                                "all candidates failed, returning error")
                        }
                        return callback(err, none)
                    }
                    return try_next_uri()
                }
                if verbose {
                    print("horp: debug: "
                        "get_package_servermeta_ini(): "
                        "success fetching URI: " + next_uri)
                }
                return callback(none, [next_uri, result])
            }, max_size=(2 * 1024),)
        }
        try_next_uri()
    }, verbose=verbose)
}

