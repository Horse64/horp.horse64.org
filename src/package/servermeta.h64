## @module package.servermeta
# Copyright (c) 2020-2024, ellie/@ell1e & Horp authors (see AUTHORS.md).
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
# 1. Redistributions of source code must retain the above copyright notice,
#    this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright notice,
#    this list of conditions and the following disclaimer in the documentation
#    and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.
#
# Alternatively, at your option, this file is offered under the Apache 2
# license, see accompanied LICENSE.md.

import confparse from core.horse64.org
import net from core.horse64.org
import net.fetch from core.horse64.org

import package

## @func get_possible_package_hosts
## For a given package name, find the associated
## internet addresses which can be tested for serving
## the server meta ini config (which has the package's
## authoritative repository location).
##
## @param package_name str The name of the package.
## @returns a @{list} of @{hostname strings|str}
func get_possible_package_hosts(
        package_name, verbose=no
        ) {
    # Assemble host name candidates:
    var host_candidates = [package_name]
    var shorter_name = package_name
    while yes {
        var result =
            package.remove_subdomain_from_package(shorter_name)
        if result == none {
            break
        }
        assert(result != package_name)
        shorter_name = result
        if shorter_name != package_name {
            host_candidates.append(shorter_name)
        }
    }

    # See if we can use any of them:
    if verbose {
        print("horp: debug: get_possible_package_hosts(): "
            "will now look up these hosts: " +
            host_candidates.as_str())
    }
    var ips = net.lookup_name(
        host_candidates, retries=3, retry_delay=0.5
    ) later:

    # If we got an error that is alike a networking
    # failure (rather than NXDOMAIN), bail out fully:
    do {
        await ips
    } rescue NetworkIOError as e {
        if verbose {
            print("horp: debug: get_possible_package_hosts(): "
                "resolver failure")
        }
        throw e
    }

    # Otherwise, return the domains for which we got an address:
    var result = []
    for candidate in host_candidates {
        if ips[candidate].len > 0 {
            result.append(candidate)
        }
    }
    if result.len > 0 {
        if verbose {
            print("horp: debug: get_possible_package_hosts(): "
                "lookups complete, some successful")
        }
        return result
    }
    throw new ValueError("No associated "
        "hostname found.")
}

func host_to_package_uri(h) {
    if typename(h) == bytes {
        h = h.as_str()
    }
    if typename(h) != "str" or h.has("/") or
            h.has("://") or not h.has(".") {
        throw new ValueException("Not a valid host.")
    }
    return "https://" + h + "/.well-known/horp-package-info/horp.conf"
}

type ServerMetaInfo {
    var raw_values protect = {->}
    var sources protect = {->}
    var uri = none
}

func ServerMetaInfo.get_package_source(package_name) {
    if self.sources.has(package_name) {
        return self.sources[package_name]
    }
    return none
}

func ServerMetaInfo.update_from_config(values, from_uri=none) {
    self.uri = from_uri
    self.raw_values = values
    self.sources = {->}
    if self.raw_values.has("package sources") {
        for key in self.raw_values["package sources"] {
            if not key.endswith(" source") {
                continue
            }
            var value = self.raw_values["package sources"][key]
            var package_name = key.sub(1,
                key.len - " source".len)
            if package.normalize_package_name(
                    package_name) == none {
                continue
            }
            self.sources[package_name] = value
        }
    }
}

func get_servermeta_info_by_package_name (
        package_name, verbose=no
        ) {
    var hosts = get_possible_package_hosts(
        package_name, verbose=verbose,
    ) later:

    await hosts

    var query_uris = []
    for host in hosts {
        query_uris.add(host_to_package_uri(host))
    }
    if verbose {
        print("horp: debug: get_package_servermeta_conf(): "
            "will consecutively try " +
            query_uris.len.as_str() + " URI(s)...")
    }
    query_uris.reverse()

    var nonfailed_uri_count = query_uris.len
    var next_uri = query_uris.pop()
    var result_str = net.fetch.get_str(
        next_uri, max_size=(2 * 1024),
        one_or_more=yes
    ) later:

    var had_error = none
    do {
        await result_str
    } rescue any as e {
        nonfailed_uri_count -= 1
        had_error = e
    }

    if verbose {
        print("horp: debug: get_package_servermeta_conf(): "
            "processing URI result: " +
            next_uri)
    }

    if had_error != none or nonfailed_uri_count == 0 {
        if query_uris.len == 0 {
            # None left to try. Just spit out the error:
            if verbose {
                print("horp: debug: "
                    "get_package_servermeta_conf(): "
                    "all candidates failed, returning error")
            }
            if had_error == none {
                had_error =
                    new net.NetworkIOError("Got an empty response.")
            }
            throw had_error
        }
        # Call net.fetch.get_str again.
        next_uri = query_uris.pop()
        result_str = net.fetch.get_str(
            next_uri, max_size=(2 * 1024)
        ) later repeat
    }
    if verbose {
        print("horp: debug: "
            "get_package_servermeta_conf(): "
            "success fetching URI: " + next_uri)
    }

    assert(result_str != none)
    var result = new ServerMetaInfo()
    do {
        var values = confparse.parse_str(result_str)
    } rescue confparse.ConfParseError as e {
        if verbose {
            print("horp: verbose: "
                "get_package_servermeta_conf(): "
                "oops, .conf at this URI is malformed: " +
                next_uri)
        }
        throw e
    }
    if values.len == 0 {
        print("horp: verbose: "
            "get_package_servermeta_conf(): "
            "oops, .conf at this URI has no sections: " +
            next_uri)
        throw new confparse.ConfParseError(
            "Config file has no sections."
        )
    }
    result.update_from_config(
        values, from_uri=next_uri
    )
    return result
}

