# Copyright (c) 2020-2022,  ellie/@ell1e & Horse64 Team (see AUTHORS.md).
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
# 1. Redistributions of source code must retain the above copyright notice,
#    this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright notice,
#    this list of conditions and the following disclaimer in the documentation
#    and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.
#
# Alternatively, at your option, this file is offered under the Apache 2
# license, see accompanied LICENSE.md.


import system from core.horse64.org

import constraint
import package.ref


func test_get_first_comparable_pos {
    var pos
    pos = package.ref.get_first_comparable_pos("")
    assert(pos == none)
    pos = package.ref.get_first_comparable_pos("abc = def")
    assert(pos == none)
    pos = package.ref.get_first_comparable_pos("abc== def")
    assert(pos == 4)
    pos = package.ref.get_first_comparable_pos("abc ! != == def")
    assert(pos == 7)
}

func test_extract_first_pkgname_with_constraints {
    var result

    result = package.ref.
        extract_first_pkgname_with_constraints(
        "  abc.example.com == 1.0 @ bla")
    assert(result != none)
    assert(result.package_ref == "abc.example.com")
    assert(result.constraints.len == 1)
    assert(result.constraints[1].op == constraint.C_EQUAL and
        result.constraints[1].value == "1.0")
    assert(result.orig_str == "  abc.example.com == 1.0 ")

    result = package.ref.
        extract_first_pkgname_with_constraints(
        "  mypackagefile.zip != 2")
    assert(result != none)
    assert(result.package_ref == "mypackagefile.zip")
    assert(result.constraints.len == 1)

    result = package.ref.
        extract_first_pkgname_with_constraints(
        "./some/folder path/")
    assert(result != none)
    assert(result.package_ref == "./some/folder path/")
    assert(result.constraints.len == 0)

    result = package.ref.
        extract_first_pkgname_with_constraints(
        "./some/folder path/ == 2.0")
    assert(result != none)
    assert(result.package_ref == "./some/folder path/")
    assert(result.constraints.len == 1)

    result = package.ref.
        extract_first_pkgname_with_constraints(
        "  abc.example.com == 1.0; >2.3-beta@ bla")
    assert(result != none)
    assert(result.package_ref == "abc.example.com")
    assert(result.constraints.len == 2)
    assert(result.constraints[1].op == constraint.C_EQUAL and
        result.constraints[1].value == "1.0")
    assert(result.constraints[2].op == constraint.C_GREATER and
        result.constraints[2].value == "2.3-beta")
    assert(result.orig_str == "  abc.example.com == 1.0; >2.3-beta")

    result = package.ref.
        extract_first_pkgname_with_constraints(
        "  abc.example.com == 1.0 ;@ bla")
    assert(result != none)
    assert(result.package_ref == "abc.example.com")
    assert(result.constraints.len == 1)
    assert(result.constraints[1].op == constraint.C_EQUAL and
        result.constraints[1].value == "1.0")
    assert(result.orig_str == "  abc.example.com == 1.0 ;")

    var result = package.ref.
        extract_first_pkgname_with_constraints(
        "  abc.example.com == 1.0 ; bla !")
    assert(result != none)
    assert(result.package_ref == "abc.example.com")
    assert(result.constraints.len == 1)
    assert(result.constraints[1].op == constraint.C_EQUAL and
        result.constraints[1].value == "1.0")
    assert(result.orig_str == "  abc.example.com == 1.0 ;")
}

func test_get_first_package_ending_space {
    var result
    result = package.ref.get_package_ending_space(
        "abc def/"
    )
    assert(result == none)
    result = package.ref.get_package_ending_space(
        "bla.abc.org def/"
    )
    assert(result == 12)
    result = package.ref.get_package_ending_space(
        "bla.abc.org/e def"
    )
    assert(result == none)
    result = package.ref.get_package_ending_space(
        "bla.abc.org/e def.pkg.org@"
    )
    assert(result == 14)
    result = package.ref.get_package_ending_space(
        "https://example.com def/"
    )
    assert(result == 20)
    result = package.ref.get_package_ending_space(
        "ef/f blub/g def/c file://bla"
    )
    assert(result == 18)
    result = package.ref.get_package_ending_space(
        "ef/f blub/ def/c file://bla"
    )
    assert(result == 11)
    result = package.ref.get_package_ending_space(
        ". blub/ def/c file://bla"
    )
    assert(result == 2)
}

func test_parse_package_refs {
    var result
    result = package.ref.parse_package_refs(
        "core.horse64.org"
    )
    assert(result.len == 1)
    assert(result[1].package_name == "core.horse64.org")
    assert(result[1].location == none)
    assert(result[1].constraints.len == 0)

    result = package.ref.parse_package_refs(
        "core.horse64.org == 1.0 @ /home/my user/Develop/core.horse64.org "
        "horp.horse64.org >= 2.0; != 2.1"
    )
    assert(result.len == 2)
    assert(result[1].package_name == "core.horse64.org")
    assert(result[1].location ==
           "file:///home/my%20user/Develop/core.horse64.org")
    assert(result[1].constraints.len == 1)
    assert(result[1].constraints[1].op == constraint.C_EQUAL)
    assert(result[1].constraints[1].value == "1.0")
    assert(result[2].package_name == "horp.horse64.org")
    assert(result[2].location == none)
    assert(result[2].constraints.len == 2)
    assert(result[2].constraints[1].op == constraint.C_GREATEREQUAL)
    assert(result[2].constraints[1].value == "2.0")
    assert(result[2].constraints[2].op == constraint.C_NOTEQUAL)
    assert(result[2].constraints[2].value == "2.1")

    result = package.ref.parse_package_refs(
        "core.horse64.org == 1.0 @ /home/my user/Develop/core.horse64.org "
        "horp.horse64.org >= 2.0; != 2.1 ."
    )
    assert(result.len == 3)
    assert(result[3].location == "file://./")

    var had_error = no
    do {
        result = package.ref.parse_package_refs(
            "core.horse64.org < 1.0"
        )
    } rescue ValueError as e {
        had_error = yes
        assert(e.msg.lower().has("block latest version"))
        assert(e.msg.lower().has("constraint"))
    }
    assert(had_error)
}

