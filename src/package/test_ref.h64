# Copyright (c) 2020-2022,  ellie/@ell1e & Horse64 Team (see AUTHORS.md).
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
# 1. Redistributions of source code must retain the above copyright notice,
#    this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright notice,
#    this list of conditions and the following disclaimer in the documentation
#    and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.
#
# Alternatively, at your option, this file is offered under the Apache 2
# license, see accompanied LICENSE.md.


import system from core.horse64.org

import package.ref

func test_get_first_comparable_pos {
    var pos
    pos = package.ref.get_first_comparable_pos("")
    assert(pos == none)
    pos = package.ref.get_first_comparable_pos("abc = def")
    assert(pos == none)
    pos = package.ref.get_first_comparable_pos("abc== def")
    assert(pos == 4)
    pos = package.ref.get_first_comparable_pos("abc ! != == def")
    assert(pos == 7)
}


func test_extract_first_pkgname_with_constraints {
    var result = package.ref.
        extract_first_pkgname_with_constraints(
        "  abc.example.com == 1.0 @ bla")
    assert(result != none)
    assert(result.package_name == "abc.example.com")
    assert(result.constraints.len == 1)
    assert(result.constraints[1][1] == "==" and
        result.constraints[1][2] == "1.0")
    assert(result.orig_str == "  abc.example.com == 1.0 ")

    var result = package.ref.
        extract_first_pkgname_with_constraints(
        "  abc.example.com == 1.0; >2.3-beta@ bla")
    assert(result != none)
    assert(result.package_name == "abc.example.com")
    assert(result.constraints.len == 2)
    assert(result.constraints[1][1] == "==" and
        result.constraints[1][2] == "1.0")
    assert(result.constraints[2][1] == ">" and
        result.constraints[2][2] == "2.3-beta")
    assert(result.orig_str == "  abc.example.com == 1.0; >2.3-beta")

    var result = package.ref.
        extract_first_pkgname_with_constraints(
        "  abc.example.com == 1.0 ;@ bla")
    assert(result != none)
    assert(result.package_name == "abc.example.com")
    assert(result.constraints.len == 1)
    assert(result.constraints[1][1] == "==" and
        result.constraints[1][2] == "1.0")
    assert(result.orig_str == "  abc.example.com == 1.0 ;")

    var result = package.ref.
        extract_first_pkgname_with_constraints(
        "  abc.example.com == 1.0 ; bla !")
    assert(result != none)
    assert(result.package_name == "abc.example.com")
    assert(result.constraints.len == 1)
    assert(result.constraints[1][1] == "==" and
        result.constraints[1][2] == "1.0")
    assert(result.orig_str == "  abc.example.com == 1.0 ;")
}


func test_parse_package_ref {

}
