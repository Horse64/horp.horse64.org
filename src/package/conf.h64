## @module package.conf
# Copyright (c) 2020-2024, ellie/@ell1e & Horp authors (see AUTHORS.md).
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
# 1. Redistributions of source code must retain the above copyright notice,
#    this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright notice,
#    this list of conditions and the following disclaimer in the documentation
#    and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.
#
# Alternatively, at your option, this file is offered under the Apache 2
# license, see accompanied LICENSE.md.

import confparse from core.horse64.org
import io from core.horse64.org
import net.fetch from core.horse64.org
import path from core.horse64.org
import uri from core.horse64.org

import limit

type PackageConf {
    var raw_str protect
    var values protect
}

func load_from_uri(conf_uri) {
    var contents = net.fetch.get_str(
        conf_uri, max_size=limit.conf_file_max_bytes,
        allow_vfs=yes, allow_disk=yes
    ) later:

    await contents
    var conf_contents = confparse.parse_str(
        contents, allow_multiline=yes,
        allow_multiassign=yes,
        error_on_mistakes=yes
    )

    var result = new PackageConf()
    result.raw_str = contents
    result.values = conf_contents

    if not result.values.has("package") {
        result.values["package"] = {->}
    }

    var expandable_patterns = {
        "code files": ["*.h64"],
        "documentation files":
            ["docs/**", "README.md", "/CONTRIBUTING.md"],
        "license files": ["LICENSE.md", "LICENSE.txt"],
        "extra files": ["/AUTHORS.md"]
    }
    for epatterns in expandable_patterns.keys() {
        var all_epatterns = none
        if result.values.has("package") {
            var all_keys = result.values["package"].keys()
            for key in all_keys {
                if key != epatterns and not key.ends(" " + epatterns) {
                    continue
                }
                if typename(result.values["package"][key]) == "str" {
                    if all_epatterns == none {
                        all_epatterns = []
                    }
                    var found_patterns = []
                    var patterns = result.values["package"][key].split(",")
                    for pattern in patterns {
                        pattern = pattern.trim()
                        if pattern.len > 0 {
                            found_patterns.add(pattern)
                            if not all_epatterns.has(pattern) {
                                all_epatterns.add(pattern)
                            }
                        }
                    }
                    if key == epatterns {
                        key = "main " + epatterns
                        result.values["package"].del(epatterns)
                    }
                    result.values["package"][key] = found_patterns
                } else {
                    result.values["package"].del(key)
                }
            }
        }
        if all_epatterns == none {
            all_epatterns = expandable_patterns[epatterns].copy()
        }
        result.values["package"]["all " + epatterns] = all_epatterns
    }

    var exclude_file_patterns = []
    if result.values.has("package") and
            result.values["package"].has("exclude files") and
            typename(result.values["package"]["exclude files"]) == "str" {
        var patterns = result.values["package"]["exclude files"].split(",")
        for pattern in patterns {
            pattern = pattern.trim()
            if pattern.len > 0 {
                exclude_file_patterns.add(pattern)
            }
        }
    } else {
        exclude_file_patterns = ["vendor/**"]
    }
    result.values["package"]["exclude files"] = exclude_file_patterns

    return result
}

func load_from_file(package_dir, allow_disk=yes, allow_vfs=yes) {
    if not allow_vfs and not allow_vfs {
        throw new io.PathNotFoundError("File not found.")
    }
    var conf_path = path.join(package_dir, "horp.conf")
    var exists_in_vfs = io.exists(conf_path, allow_disk=no,
        allow_vfs=allow_vfs) later:

    await exists_in_vfs
    var is_vfs = (not allow_disk) or
        (allow_vfs and exists_in_vfs)
    var conf_uri
    if is_vfs {
        conf_uri = uri.from_vfs_path(conf_path)
    } else {
        conf_uri = uri.from_disk_path(conf_path)
    }
    var result = load_from_uri(conf_uri) later:

    await result
    return result
}
 
