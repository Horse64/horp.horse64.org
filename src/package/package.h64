## @module package
# Copyright (c) 2020-2024, ellie/@ell1e & Horp Team (see AUTHORS.md).
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
# 1. Redistributions of source code must retain the above copyright notice,
#    this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright notice,
#    this list of conditions and the following disclaimer in the documentation
#    and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.
#
# Alternatively, at your option, this file is offered under the Apache 2
# license, see accompanied LICENSE.md.

import io from core.horse64.org
import path from core.horse64.org
import text from core.horse64.org
import wildcard from core.horse64.org

import package.conf

## @func normalize_package_name
## Normalizes a horp package name.
## @returns (str or none) returns str with the normalized package
##   if it was a valid name to start with, otherwise returns none
func normalize_package_name(h) {
    h = h + ""
    if typename(h) != "str" {
        throw new TypeError("package name must be string")
    }
    if not h.has(".") or h.starts(".") or h.ends(".") {
        return none
    }
    h = h.lower()
    var dotcount = 0
    i = 1
    while i <= h.len {
        if h[i] == "." and i + 1 <= h.len and h[i + 1] == "." {
            return none
        }
        if h[i] == "." {
            dotcount += 1
        }
        if h[i] == "-" and (i + 1 <= h.len and h[i + 1] == "." or
                i - 1 >= 1 and h[i - 1] == ".") {
            return none
        }
        var cp = text.code(h[i])
        if cp <= 127 and (h[i] != "-" or i == 0) and
                h[i] != "." and
                (cp < text.code("a") or 
                cp > text.code("z")) and
                (cp < text.code("0") or
                cp > text.code("9")) {
            return none
        }
        i += 1
    }
    if dotcount < 2 {
        return none
    }
    return h
}

## Do something for every code file found in a given
## package dir. Requires the package to be downloaded first.
## This is useful e.g. for building packages or copying them.
## @param callback The callback function to call on every file.
##     Will be passed the relative(!) path, relative to the
##     given package dir, as first and only parameter.
##     If the callback returns the bool value `no`, then the
##     iteration over the files will abort. If it returns
##     anything else, it will continue to the end.
## @param limit_to_kind The type of files as listed in the
##     package config to list for, if not just all files.
##     To get any code files of any kind, set it to the
##     literal string value "all code files".
## @param code_with_templates When listing code only, whether
##     to include any templated code files. Defaults to yes.
## @returns yes if the iteration fully completed, no if it
##     aborted due to the callback returning no.
func do_for_all_files(callback, package_dir,
        limit_to_kind=none,
        code_with_templates=yes, allow_vfs=yes, allow_disk=yes,
        verbose=no) {

    func handle_entry_in_sublist(entry, skip_if_exists_path) {
        if skip_if_exists_path == none {
            var result = callback(entry) later:

            await result
            if result == no {
                return later no
            }
            return later yes
        }

        var result = io.exists(
            skip_if_exists_path, allow_vfs=allow_vfs,
            allow_disk=allow_disk
        ) later:

        await result
        if result {
            return later yes
        }
        result = callback(entry) later:

        await result
        if result == no {
            return later no
        }
        return later yes
    }

    func do_for_all_files_in_sublist(l) {
        if l.len == 0 {
            return yes
        }

        var next_entry = l.pop()
        var handle_result = handle_entry_in_sublist(
            next_entry[1], next_entry[2]
        ) later:

        await handle_result
        if not handle_result {
            return no
        }

        if l.len == 0 {
            return yes
        }
        next_entry = l.pop()
        handle_result = handle_entry_in_sublist(
            next_entry[1], next_entry[2]
        ) later repeat
    }

    if verbose {
        print("horp: verbose: do_for_all_files(): "
            "Called with parameters limit_to_kind=" +
            limit_to_kind.as_str() +
            ", code_with_templates=" +
            code_with_templates.as_str())
    }

    var conf = package.conf.load_from_file(
        package_dir, allow_vfs=allow_vfs, allow_disk=allow_disk
    ) later:

    await conf

    # See what sort of code we want to scan for, if any:
    var code_patterns = conf.values["package"]["all code files"]
    code_patterns =
        wildcard.transform_list_for_rel_paths(code_patterns)
    var listing_only_code = no
    if limit_to_kind != none {
        if limit_to_kind == "code files" or
                limit_to_kind.ends(" code files") {
            listing_only_code = yes
            if limit_to_kind == "code files" {
                limit_to_kind = "all code files"
            }
            code_patterns = []
            if conf.values["package"].has(limit_to_kind) {
                code_patterns = wildcard.transform_list_for_rel_paths(
                    conf.values["package"][limit_to_kind])
            }
        } else {
            listing_only_code = no
            code_with_templates = yes
        }
    } else {
        code_with_templates = yes
    }

    # Collect all other patterns:
    var exclude_patterns = conf.values["package"]["exclude files"]
    exclude_patterns =
        wildcard.transform_list_for_rel_paths(exclude_patterns)
    var known_misc_file_pattern_names = [
        "extra files", "license files",
        "documentation files"
    ]
    var all_noncode_patterns = []
    for misc_pattern in known_misc_file_pattern_names {
        if not conf.values["package"].has("all " + misc_pattern) {
            continue
        }
        patterns = conf.values["package"]["all " + misc_pattern]
        patterns =
            wildcard.transform_list_for_rel_paths(patterns)
        all_noncode_patterns += patterns
    }
    var config_patterns = ["horp.conf", "horp-build.conf"]
    config_patterns =
        wildcard.transform_list_for_rel_paths(config_patterns)

    # If we're not limiting to code, check what we want to limit to:
    var limited_to_noncode_patterns = none
    var listing_excludes_code = no
    if limit_to_kind != none and not listing_only_code {
        listing_excludes_code = yes
        limited_to_noncode_patterns = []
        if not limit_to_kind.ends(" files") {
            limit_to_kind += " files"
        }
        if not limit_to_kind.starts("all ") and
                conf.values["package"].has("all " + limit_to_kind) {
            limited_to_noncode_patterns =
                conf.values["package"]["all " + limit_to_kind]
        } else {
            if conf.values["package"].has(limit_to_kind) {
                limited_to_noncode_patterns =
                    conf.values["package"][limit_to_kind]
            }
        }
        limited_to_noncode_patterns =
            wildcard.transform_list_for_rel_paths(
                limited_to_noncode_patterns)
    }
    if verbose {
        print("horp: verbose: do_for_all_files(): "
            "Will proceed with following computed values: " +
            "listing_excludes_code=" +
            listing_excludes_code.as_str() + ", "
            "listing_only_code=" +
            listing_only_code.as_str() + ", "
            "limited_to_noncode_patterns=" +
            limited_to_noncode_patterns.as_str() + ", "
            "exclude_patterns=" +
            exclude_patterns.as_str() + ", "
            "code_with_templates=" +
            code_with_templates.as_str() + ", "
            "code_patterns=" +
            code_patterns.as_str() + ", "
            "all_noncode_patterns=" +
            all_noncode_patterns.as_str() + "."
        )
    }
    if limited_to_noncode_patterns != none and
            limited_to_noncode_patterns.len == 0 {
        return yes
    }

    # Now start actually looking for the files:
    var walker = io.tree_list_walker(
        package_dir, relative=yes, return_dirs=no,
        exclude_dot_names=yes, exclude_dir_names=["horse_modules"],
        allow_vfs=allow_vfs, allow_disk=allow_disk)

    var entries = walker.walk() later:

    await entries
    if entries == none {
        return yes
    }

    var file_list = []
    for entry in entries {
        # First, check if we need to skip this:
        var must_exclude = no
        for pattern in exclude_patterns {
            if wildcard.match(pattern, entry) {
                must_exclude = yes
                break
            }
        }
        if must_exclude {
            continue
        }

        # Handle returning a specific non-code kind of pattern:
        if listing_excludes_code {
            assert(limited_to_noncode_patterns != none)
            var match_found = none
            for pattern in limited_to_noncode_patterns {
                if wildcard.match(pattern, entry) {
                    match_found = yes
                    break
                }
            }
            if match_found {
                file_list.append([entry, none])
            }
            continue
        }

        # Check if this is a meta file:
        var file_is_template = (
            entry.len > ".tmpl".len and
            entry.ends(".tmpl")
        )
        if file_is_template and not code_with_templates {
            continue
        }
        var file_confirmed_included = no
        for pattern in all_noncode_patterns {
            if wildcard.match(pattern, entry) {
                file_confirmed_included = yes
                break
            }
        }
        if not file_confirmed_included {
            for pattern in config_patterns {
                if wildcard.match(pattern, entry) {
                    file_confirmed_included = yes
                    break
                }
            }
        }

        # Check if this matches a code file:
        var revoke_entry_if_path_exists = none
        if not file_confirmed_included or
                listing_only_code {
            var is_code_or_templated_code = no
            for pattern in code_patterns {
                if not file_is_template {
                    if wildcard.match(pattern, entry) {
                        is_code_or_templated_code = yes
                        revoke_entry_if_path_exists = (
                            entry + ".tmpl"
                        )
                        break
                    }
                } elseif file_is_template and
                        wildcard.match(pattern,
                            entry.sub(1, entry.len - ".tmpl".len)) {
                    is_code_or_templated_code = yes
                    break
                }
            }
            assert(not file_is_template or code_with_templates)
            file_confirmed_included = is_code_or_templated_code
        }
        if file_confirmed_included {
            file_list.append([
                entry,
                if revoke_entry_if_path_exists != none
                    (path.join(package_dir, revoke_entry_if_path_exists))
                    else (none)
            ])
        }
    }
    var result = do_for_all_files_in_sublist(file_list) later:

    await result
    if result == no {
        return later no
    }

    entries = walker.walk() later repeat
}

## Trim a given package name, which should always be a domain,
## by one subdomain.
## @param pname str The package name to be trimmed by one subdomain.
## @returns (str or none) Returns the package name with one
##     subdomain removed from the front. If no subdomain was left,
##     returns none.
func remove_subdomain_from_package(pname) {
    var firstdotpos = none
    var dotcount = 0
    var i = 1
    while i <= pname.len {
        if pname[i] == "." {
            if firstdotpos == none {
                firstdotpos = i
            }
            dotcount += 1
        }
        i += 1
    }
    if dotcount < 2 {
        return none
    }
    assert(firstdotpos > 1)
    return pname.sub(firstdotpos + 1)
}

