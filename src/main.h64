# @module main
# Copyright (c) 2020-2022,  ellie/@ell1e & Horse64 Team (see AUTHORS.md).
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
# 1. Redistributions of source code must retain the above copyright notice,
#    this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright notice,
#    this list of conditions and the following disclaimer in the documentation
#    and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.
#
# Alternatively, at your option, this file is offered under the Apache 2
# license, see accompanied LICENSE.md.


import argparse from core.horse64.org
import system from core.horse64.org

import package
import package.servermeta


func actionparser_add(args, verbose=no) {
    var defs = argparse.ArgumentDefs(program_name="horp add")
    defs.add_arg(
        "target name", description="The name of the package to "
        "install, or an install source like a folder with its contents.")
    defs.add_switch(
        "--update", takes_arg=no,
        description="If the package is already installed but "
            "a newer version is available, upgrade it.")
    defs.add_switch("--verbose", description="Output extra information "
        "when doing things.")
    var result = argparse.parse(defs, args)
    if result.output != "" {
        print(result.output)
        return result.exit_code
    }
    if result.args["--verbose"] {
        verbose = yes
    }
    var package_name = package.
        normalize_package_name(result.args["target name"])
    if package_name == none {
        print("horp: error: Not a valid package name: " +
            result.args["target name"])
        return 1
    }
    package.servermeta.get_servermeta_info_by_package_name(
        package_name, verbose=verbose, func (err, info) {
            if err != none {
                print("horp: error: Failed to get server meta horp.ini: " +
                    err.msg)
                print("Did you target an existing horp package?")
                system.exit(1)
            }
            print("Package ini url: " + info.source_uri)
    })
    return 0
}


func main {
    var defs = new argparse.ArgumentDefs(program_name="horp")
    defs.add_arg("action", description="Pick an available actions: "
        "add, del. To see details for an action, use it with --help "
        "like e.g.: horp add --help")
    defs.add_catchall("action args", description="List of "
        "arguments for the specified action")
    defs.add_switch("--verbose", description="Output extra information "
        "when doing things.")
    var result = argparse.parse(defs)
    if result.output != "" {
        print(result.output)
        return result.exit_code
    }
    if result.args["action"] == "add" {
        return actionparser_add(result.args["action args"],
            verbose=result.args["--verbose"])
    } else {
        print("horp: error: Unknown action: " + result.args["action"])
        print("Use horp --help to show usage.")
        return 1
    }
}
