# @module main
# Copyright (c) 2020-2023, ellie/@ell1e & Horp Team (see AUTHORS.md).
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
# 1. Redistributions of source code must retain the above copyright notice,
#    this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright notice,
#    this list of conditions and the following disclaimer in the documentation
#    and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.
#
# Alternatively, at your option, this file is offered under the Apache 2
# license, see accompanied LICENSE.md.

import argparse from core.horse64.org
import system from core.horse64.org

import package
import package.ref as ref
import package.servermeta

var package_refs_explainer = "(e.g. a package name, "
    "or folder path to a package's local source copy)"

func actionparser_info(args, verbose=no) {
    var defs = argparse.ArgumentDefs(
        program_name="horp info", description="Show info about the given "
            "packages.")
    defs.add_arg(
        "package refs", description="Package refs " +
        package_refs_explainer + " to print "
        "information about, like version, source location, etc.")
    defs.add_switch("--verbose", description="Output extra information "
        "when doing things.")
    var result = argparse.parse(defs, args)
    if result.output != "" {
        print(result.output)
        return result.exit_code
    }
    if result.args["--verbose"] {
        verbose = yes
    }
    var target_refs = ref.parse_and_locate_package_refs(
        result.args["package refs"], verbose=verbose
    ) later:

    do {
        await target_refs
    } rescue any as err {
        print("horp: error: Failed to resolve package refs: " +
            err.msg)
        print("Did you specify existing horp packages?")
    }
    print("Package refs: " + target_refs.as_str())
}


func actionparser_add(args, verbose=no) {
    var defs = argparse.ArgumentDefs(program_name="horp add",
        description="Install the specified packages to the local "
        "horse_modules folder.")
    defs.add_arg(
        "package refs", description="Package refs " +
        package_refs_explainer + " to install locally.")
    defs.add_switch(
        "--update", aliases=["-u"], takes_arg=no,
        description="If the package is already installed but "
            "a newer version is available, upgrade it.")
    defs.add_switch("--verbose", description="Output extra information "
        "when doing things.")
    var result = argparse.parse(defs, args)
    if result.output != "" {
        print(result.output)
        return result.exit_code
    }
    if result.args["--verbose"] {
        verbose = yes
    }
    var target_refs = ref.parse_and_locate_package_refs(
        result.args["package refs"], verbose=verbose
    ) later:

    do {
        await target_refs
    } rescue any as err {
        print("horp: error: Failed to resolve package refs: " +
            err.msg)
        print("Did you specify existing horp packages?")
    }
    print("Package refs: " + target_refs.as_str())
}


func main {
    var defs = new argparse.ArgumentDefs(
        program_name="horp",
        description="Horp is the official Horse64 package manager. "
            "Use it to get and upgrade additional libraries and tools.")
    defs.add_arg("action", description="Pick an available actions: "
        "add, info, del. To see details for an action, use it with "
        "--help.\nE.g.: horp add --help")
    defs.add_catchall("action args", description="List of "
        "arguments for the specified action")
    defs.add_switch("--verbose", description="Output extra information "
        "when doing things.")
    var result = argparse.parse(defs)
    if result.output != "" {
        print(result.output)
        return result.exit_code
    }
    if result.args["action"] == "add" {
        var return_code = actionparser_add(
            result.args["action args"],
            verbose=result.args["--verbose"]) later:

        await return_code
        return return_code
    } elseif result.args["action"] == "info" {
        var return_code = actionparser_info(
            result.args["action args"],
            verbose=result.args["--verbose"]) later:

        await return_code
        return return_code
    } else {
        var commonly_wrong = {
            "add"-> {"install"},
            "add --reinstall"-> {"reinstall"},
            "info"-> {"show"},
            "del"-> {"delete", "remove", "uninstall"},
        }
        print("horp: error: Unknown action: " + result.args["action"])
        print("Use horp --help to show usage.")
        for entry in commonly_wrong {
            var variants = commonly_wrong[entry]
            if variants.has(result.args["action"].lower()) or
                    entry.lower() == result.args["action"] {
                print('Did you maybe mean to use "horp ' + entry + '"?')
            }
        }
        return 1
    }
}
