## @module main
# Copyright (c) 2020-2024, ellie/@ell1e & Horp Team (see AUTHORS.md).
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
# 1. Redistributions of source code must retain the above copyright notice,
#    this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright notice,
#    this list of conditions and the following disclaimer in the documentation
#    and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.
#
# Alternatively, at your option, this file is offered under the Apache 2
# license, see accompanied LICENSE.md.

import argparse from core.horse64.org
import system from core.horse64.org

import build.template
import package
import package.conf
import package.ref as ref
import package.servermeta

var package_refs_explainer = "(e.g. a package name, "
    "or dir path to a package's local source directory)"

func print_info_list_files(refs, limit_to_kind=none,
        code_with_templates=no, verbose=no) {
    var queue = refs.copy()

    var next_ref = queue.pop()
    if verbose {
        print("horp: verbose: print_info_list_files(): "
            "Obtaining file list for \"" +
            next_ref.package_name + "\"...")
    }
    var result = ref.print_files_list_from_ref(
        next_ref, limit_to_kind=limit_to_kind,
        code_with_templates=code_with_templates,
        verbose=verbose) later:

    await files
    if not result {
        print("horp: error: Failed to obtain files for this ref, "
            "check if this package is actually accessible: " +
            next_ref.as_str())
        return later 1
    }
    if queue.len == 0 {
        return later 0
    }

    next_ref = queue.pop()
    if verbose {
        print("horp: verbose: print_info_list_files(): "
            "Obtaining file list for \"" +
            next_ref.package_name + "\"...")
    }
    result = ref.print_files_list_from_ref(
        next_ref, limit_to_kind=limit_to_kind,
        code_with_templates=code_with_templates,
        verbose=verbose
    ) later repeat
}

func actionparser_show(args, verbose=no) {
    var defs = argparse.ArgumentDefs(
        program_name="horp show", description="Show various things "
            "like general info about the given "
            "packages.")
    defs.add_arg("action", description="Specify an action to execute, "
        "available choices being: 1. \"info\" (show the general info), "
        "2. \"files\" (list all files known to belong to the package), "
        "3. \"code-files\" (list all code files of the package), "
        "4. \"code-files-no-templates\" (list all code files, but "
        "omit the code file templates).")
    defs.add_switch("--filter", takes_arg=yes, description="For "
        "the \"files\" action, filter for a specific type of file, "
        "for example \"documentation files\".")
    defs.add_arg(
        "package refs", description="Package refs " +
        package_refs_explainer + " to show "
        "details about, like version, source location, etc.")
    defs.add_switch("--verbose", description="Output extra information "
        "when assembling the requested details.")
    var result = argparse.parse(defs, args)
    if result.output != "" {
        print(result.output)
        return result.exit_code
    }
    if result.args["--verbose"] {
        verbose = yes
    }
    var target_refs = ref.parse_and_populate_package_refs(
        result.args["package refs"], verbose=verbose
    ) later:

    do {
        await target_refs
    } rescue any as err {
        print("horp: error: Failed to resolve package refs: " +
            err.msg)
        print("Did you specify existing horp packages?")
        return 1
    }

    # Helper functions to execute detailed info requests if any:
    func print_info_list_files_if_needed(refs, verbose=no) {
        var do_list_files = no
        var do_list_kind_of_file = none
        var do_exclude_templates_from_code= no
        if result.args["action"] == "files" {
            do_list_files = yes
            filter = result.args["--filter"]
            if filter != none and filter.len > 0 {
                do_list_kind_of_file = filter
            }
        } elseif result.args["action"] == "code-files" {
            do_list_files = yes
            do_list_kind_of_file = "all code files"
        } elseif result.args["action"] == "code-files-no-templates" {
            do_list_files = yes
            do_list_kind_of_file = "all code files"
            do_exclude_templates_from_code = yes
        }
        if not do_list_files {
            return later none
        }
        did_list_files = yes
        var exit_code = print_info_list_files(
            refs, limit_to_kind=do_list_kind_of_file,
            code_with_templates=
                not do_exclude_templates_from_code,
            verbose=verbose
        ) later:

        await exit_code
        return later exit_code
    }

    # Figure out what info we should actually provide:
    var print_result = print_info_list_files_if_needed(
        target_refs, verbose=verbose) later:

    await print_result
    if print_result != none {
        return print_result
    }
    if result.args["action"] != "info" {
        print("horp: error: Encountered unknown action: " +
            result.args["action"])
        print("Use horp info --help to show the usage.")
        return 1
    }

    # If we arrive here we weren't asked to do anything special,
    # so just print out the basic refs:
    func print_general_info(pref) {
        var ref_name = pref.get_printable_name(max_len=50)
        heading = "General info for " + ref_name
        print(heading)
        print("=".rep(heading.glyph_len))
        print("Name: " + pref.package_name.as_str())
        print("Location: " + pref.location.as_str())
        print("Config at: " + pref.get_conf_uri())
        var conf = pref.get_conf(return_none_on_error=yes)
        later:

        await conf
        if conf != none and conf.values.has("package") and
                conf.values["package"].has("version") {
            print("Version: " +
                conf.values["package"]["version"].as_str())
        }
        if conf != none and conf.values.has("package") and
                conf.values["package"].has("description") {
            print("Description: " +
                conf.values["package"]["description"].as_str())
        }
        print("")
    }

    var queue = target_refs.copy()
    if queue.len == 0 {
        return later 0
    }
    var next_entry = queue.pop()
    var print_result = print_general_info(next_entry)
    later:

    await print_result
    if queue.len == 0 {
        return later 0
    }
    next_entry = queue.pop()
    print_result = print_general_info(next_entry) later repeat
}

func actionparser_add(args, verbose=no) {
    var defs = argparse.ArgumentDefs(program_name="horp add",
        description="Install the specified packages to the local "
        "horse_modules directory.")
    defs.add_arg(
        "package refs", description="Package refs " +
        package_refs_explainer + " to install locally.")
    defs.add_switch(
        "--update", aliases=["-u"], takes_arg=no,
        description="If the package is already installed but "
            "a newer version is available, upgrade it.")
    defs.add_switch("--verbose", description="Output extra information "
        "when doing things.")
    var result = argparse.parse(defs, args)
    if result.output != "" {
        print(result.output)
        return result.exit_code
    }
    if result.args["--verbose"] {
        verbose = yes
    }
    var target_refs = ref.parse_and_locate_package_refs(
        result.args["package refs"], verbose=verbose
    ) later:

    do {
        await target_refs
    } rescue any as err {
        print("horp: error: Failed to resolve package refs: " +
            err.msg)
        print("Did you specify existing horp packages?")
    }
    print("Package refs: " + target_refs.as_str())
}

func version_output_for_terminal {
    return "horp v" + system.program_version() + ", built by " +
        system.program_compiler_name + ", running on " +
        system.osname + ".\n" +
        "Copyright (c) 2020-2024, ellie/@ell1e & Horse64 Team."
}

func license_output_for_terminal {
    return "All horp license info with no guarantee of "
        "completeness or accuracy:\n" +
        system.program_license_text(layout_width=79)
}

func main {
    var defs = new argparse.ArgumentDefs(
        program_name="horp",
        description="Horp is the official Horse64 package manager. "
            "Use it to get and upgrade additional libraries and tools.")
    defs.add_arg("action", description="Pick an available actions: "
        "add, del, info, template. "
        "To see details for an action, use it with "
        "--help to get more info.\nE.g.: horp add --help")
    defs.add_catchall("action args", description="List of "
        "arguments for the specified action.")
    defs.add_switch("--verbose", description="Output extra information "
        "when doing things.")
    defs.add_switch(
        "--license",
        description="Print out horp's own licensing (not that "
            "of any package).",
        action_func=license_output_for_terminal)
    defs.add_switch(
        "--version", aliases=["-V", "-version"],
        description="Print out the program version.",
        action_func=version_output_for_terminal)
    var result = argparse.parse(defs)
    if result.output != "" {
        print(result.output)
        return result.exit_code
    }
    if result.args["action"] == "add" {
        var return_code = actionparser_add(
            result.args["action args"],
            verbose=result.args["--verbose"]) later:

        await return_code
        return return_code
    } elseif result.args["action"] == "show" {
        var return_code = actionparser_show(
            result.args["action args"],
            verbose=result.args["--verbose"]) later:

        await return_code
        return return_code
    } elseif result.args["action"] == "build" {
        var return_code = build.actionparser_build(
            result.args["action args"],
            verbose=result.args["--verbose"]
        ) later:

        await return_code
        return return_code
    } else {
        var commonly_wrong = {
            "add"-> {"install"},
            "add --reinstall"-> {"reinstall"},
            "show info"-> {"info"},
            "del"-> {"delete", "remove", "uninstall"},
        }
        print("horp: error: Unknown action: " + result.args["action"])
        print("Use horp --help to show usage.")
        for entry in commonly_wrong {
            var variants = commonly_wrong[entry]
            for variant in variants {
                if variant.lower() == result.args["action"].lower() or
                        variant.lower().starts(
                            result.args["action"].lower() + " "
                        ) or
                        entry.lower() == result.args["action"] {
                    print('Did you maybe mean to use '
                        '"horp ' + entry + '"?')
                }
            }
        }
        return 1
    }
}

