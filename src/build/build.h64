##@module build
# Copyright (c) 2024, ellie/@ell1e & Horp Team (see AUTHORS.md).
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
# 1. Redistributions of source code must retain the above copyright notice,
#    this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright notice,
#    this list of conditions and the following disclaimer in the documentation
#    and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.
#
# Alternatively, at your option, this file is offered under the Apache 2
# license, see accompanied LICENSE.md.

import argparse from core.horse64.org

import build.c_toolchain
import build.template

func actionparser_build_show(args, verbose=no) {
    var defs = argparse.ArgumentDefs(
        program_name="horp build info",
        description="Output info about "
        "the build regarding a specific package.")
    defs.add_arg(
        "package refs", description="The packages for which "
        "to handle the templates.")
    defs.add_switch("--verbose", description="Output extra information "
        "when doing things.")
    var result = argparse.parse(defs, args)
    if result.output != "" {
        print(result.output)
        return later result.exit_code
    }
    if result.args["--verbose"] {
        verbose = yes
    }
    var target_refs = ref.parse_and_populate_package_refs(
        result.args["package refs"], verbose=verbose
    ) later:

    do {
        await target_refs
    } rescue any as err {
        print("horp: error: Failed to resolve package refs: " +
            err.msg)
        print("Did you specify existing horp packages?")
        return 1
    }
    #if not {"apply", "list"}.has(result.args["action"]) {
    #    print("horp: error: Unknown action \"" +
    #        result.args["action"] + "\".")
    #    print("Use horp build info --help to "
    #        "show available actions.")
    #    return later 1
    #}
    #var exit_code = process_templates_for_refs(
    #    target_refs, result.args["action"], verbose=verbose
    #) later:

    #await exit_code
    return later none
}

func actionparser_build(args, verbose=no) {
    var defs = argparse.ArgumentDefs(
        program_name="horp build",
        description="Run the build, or output info about "
        "the build, or access build submodules.")
    defs.add_arg("action", description="Specify an action to execute, "
        "available choices being \"show\" (output general "
        "info about the build of a package), \"template\" "
        "(access the template functions), \"c_toolchain\" "
        "(access the C toolchain functions).")
    defs.add_catchall(
        "action args", description="The arguments for the action.")
    defs.add_switch("--verbose", description="Output extra information "
        "when doing things.")
    var result = argparse.parse(defs, args)
    if result.output != "" {
        print(result.output)
        return later result.exit_code
    }
    if result.args["--verbose"] {
        verbose = yes
    }

    if not {"show", "template",
            "c_toolchain"}.has(result.args["action"]) {
        print("horp: error: Unknown action \"" +
            result.args["action"] + "\".")
        print("Use horp build --help to show available actions.")
        return later 1
    }
    if result.args["action"] == "template" {
        var return_code = build.template.actionparser_build_template(
            result.args["action args"],
            verbose=result.args["--verbose"]
        ) later:

        await return_code
        return return_code
    } elseif result.args["action"] == "show" {
        var return_code = actionparser_build_show(
            result.args["action args"],
            verbose=result.args["--verbose"]
        ) later:

        await return_code
        return return_code
    } else {
        assert(result.args["action"] == "c_toolchain")

        var return_code =
            build.c_toolchain.actionparser_build_c_toolchain(
                result.args["action args"],
                verbose=result.args["--verbose"]
            ) later:

        await return_code
        return return_code
    }
}

