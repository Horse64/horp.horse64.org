## @module template
# Copyright (c) 2024, ellie/@ell1e & Horp Team (see AUTHORS.md).
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
# 1. Redistributions of source code must retain the above copyright notice,
#    this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright notice,
#    this list of conditions and the following disclaimer in the documentation
#    and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.
#
# Alternatively, at your option, this file is offered under the Apache 2
# license, see accompanied LICENSE.md.

import argparse from core.horse64.org
import path from core.horse64.org
import uri from core.horse64.org

import package
import package.ref as ref

func process_templates_for_ref_unsafe(ref, action) {
    var where_uri = ref.location
    var where_prot = uri.get_protocol(where_uri)
    if not {"file", "vfs"}.has(where_prot.lower()) {
        print("horp: error: Can't process templates for package, "
            "since local install location wasn't found: " + ref.as_str())
        return later no
    }
    var pkg_folder = uri.to_file_or_vfs_path(where_uri)

    var processed_any_template = no
    func callback(file_entry) {
        if action == "apply" and (
                file_entry != "horp-build.conf" and
                not file_entry.ends(path.sep + "horp-build.conf")) {
            return none
        } elseif action == "list" and
                file_entry.len > ".tmpl".len and
                file_entry.ends(".tmpl") {
            print("Template: " + file_entry)
            processed_any_template = yes
        }
        return later none
    }

    var success = package.do_for_all_files(callback, pkg_folder,
        allow_vfs=yes, allow_disk=yes,
        verbose=no) later:

    await success
    if not success {
        print("horp: error: File listing failed, "
            "is this package accessible on disk? For package: " +
            ref.as_str())
        return later no
    }
    if not processed_any_template and action == "list" {
        print("horp: warning: No templates found!")
    }
    return later yes
}

func process_templates_for_ref(ref, action) {
    do {
        var result = process_templates_for_ref_unsafe(ref, action)
        later:

        await result
        if not result {
            return no
        }
    } rescue any as e {
        print("horp: error: Failed to process templating for "
            "ref: " + ref.as_str())
        print("horp: error: Error details: " + e.as_str())
        return no
    }
    return yes
}

func process_templates_for_refs(refs, action) {
    var queue = refs.copy()
    if queue.len == 0 {
        return 0
    }
    var next_ref = refs.pop()
    var build_result = process_templates_for_ref(next_ref, action)
    later:

    await build_result
    if not build_result {
        return 1
    }

    if queue.len == 0 {
        return 0
    }
    next_ref = refs.pop()
    build_result = process_templates_for_ref(
        next_ref
    ) later repeat
}

func actionparser_template(args, verbose=no) {
    var defs = argparse.ArgumentDefs(program_name="horp template",
        description="Instead of running the full build actions, "
        "just run the templating build step on the given package "
        "directory.")
    defs.add_arg("action", description="Specify an action to execute, "
        "available choices being \"list\" (list the template files) and "
        "\"apply\" (write out the target files for the templates).")
    defs.add_arg(
        "package refs", description="The packages for which "
        "to handle the templates.")
    defs.add_switch("--verbose", description="Output extra information "
        "when doing things.")
    var result = argparse.parse(defs, args)
    if result.output != "" {
        print(result.output)
        return later result.exit_code
    }
    if result.args["--verbose"] {
        verbose = yes
    }
    var target_refs = ref.parse_and_populate_package_refs(
        result.args["package refs"], verbose=verbose
    ) later:

    do {
        await target_refs
    } rescue any as err {
        print("horp: error: Failed to resolve package refs: " +
            err.msg)
        print("Did you specify existing horp packages?")
    }
    if not {"apply", "list"}.has(result.args["action"]) {
        print("horp: error: Unknown action \"" +
            result.args["action"] + "\".")
        print("Use horp template --help to show available actions.")
        return later 1
    }
    var exit_code = process_templates_for_refs(
        target_refs, result.args["action"]) later:

    await exit_code
    return later exit_code
}

