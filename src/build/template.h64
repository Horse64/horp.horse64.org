## @module build.template
# Copyright (c) 2024, ellie/@ell1e & Horp authors (see AUTHORS.md).
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
# 1. Redistributions of source code must retain the above copyright notice,
#    this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright notice,
#    this list of conditions and the following disclaimer in the documentation
#    and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.
#
# Alternatively, at your option, this file is offered under the Apache 2
# license, see accompanied LICENSE.md.

import argparse from core.horse64.org
import confparse from core.horse64.org
import io from core.horse64.org
import json from core.horse64.org
import path from core.horse64.org
import textfmt from core.horse64.org
import uri from core.horse64.org

import limit
import package
import package.ref as ref

func get_variables_for_template(template_path, template_settings) {
    var result = {->}
    var template_folder = path.dirname(template_path)
    var queue = template_settings["inputs"]
    if queue == none or queue.len == 0 {
        return result
    }

    # Load up all input files from which we feed our template data:
    var next_entry = queue.pop()
    var fexists = io.exists(path.join(
        template_settings["project-root"],
        next_entry
    )) later:

    await fexists
    if not fexists {
        return later no
    }
    var f = io.open(path.join(
        template_settings["project-root"],
        next_entry
    ), "r") later:

    await f
    var contents
    contents = f.read() later:

    await contents
    f.close()

    # Parse the actual variables inside:
    var var_obj = json.parse(contents)
    if typename(var_obj) == "map" {
        for key in var_obj {
            result[key] = var_obj[key]
        }
    } else {
        return later no
    }

    # If we're done with all input files, stop here:
    if queue == none or queue.len == 0 {
        return result
    }

    # Otherwise continue:
    next_entry = queue.pop()
    fexists = io.exists(path.join(
        template_settings["project-root"],
        next_entry
    )) later repeat
}

func apply_single_template(
        template_path, template_settings, verbose=verbose
        ) {
    var variables = get_variables_for_template(
        template_path, template_settings) later:

    await variables
    if variables == no {
        return later no
    }
    var template_contents = none
    var f = io.open(template_path, "r") later:

    await f
    template_contents = f.read() later:

    await template_contents
    f.close()

    var target_file_path = template_settings["target-path"]
    if verbose {
        print("horp: verbose: apply_single_template(): "
            "Rendering to target: " + target_file_path)
    }
    var render_result
    do {
        render_result = textfmt.template_from_str(
            template_contents).apply(variables)
    } rescue any {
        render_result = no
    }
    if render_result == no {
        return later no
    }
    f = io.open(target_file_path, "w") later:

    await f
    f.write(render_result) later:

    f.close()
    return later yes
}

func apply_templates_from_conf_file(
        project_base_path,
        build_conf_path, build_conf_project_rel_path,
        verbose=no
        ) {
    if verbose {
        print("horp: verbose: apply_templates_from_conf_file(): "
            "Parsing build conf file at: " + build_conf_path)
    }
    var values = confparse.parse_from_file(
        build_conf_path, allow_multiline=yes,
        allow_multiassign=yes,
        error_on_mistakes=no,
        max_size=limit.conf_file_max_bytes,
        allow_vfs=yes,
        allow_disk=yes
    ) later:

    await values
    var build_conf_folder = path.dirname(build_conf_path)
    if not values.has("build template") {
        return later yes
    }
    var templates = {->}
    for key in values["build template"] {
        if key.ends(" template") {
            var name = key.sub(1, key.len - " template".len)
            name = name.trim()
            if name.len == 0 {
                return later no
            }
            var tmpl = {
                "src-path"-> path.normalize(path.join(build_conf_folder,
                    path.normalize(values["build template"][key]))),
                "project-root"->project_base_path,
                "inputs"->[]
            }
            if not tmpl["src-path"].ends(".tmpl") {
                return later no  # This isn't allowed.
            }
            tmpl["target-path"] = tmpl["src-path"].sub(
                1, tmpl["src-path"].len - ".tmpl".len
            )
            if tmpl["target-path"].ends(path.sep) or
                    tmpl["target-path"].len == 0 {
                return later no
            }
            templates[name] = tmpl
        }
    }
    var queue = []
    for name in templates {
        var inputs = []
        if values["build template"].has(name + " template input") {
            inputs = values["build template"][name + " template input"]
        }
        if typename(inputs) == "str" {
            inputs = [inputs]
        }
        if inputs.len > 0 {
            fixed_inputs = []
            for input_src in inputs {
                assert(not path.is_abs(build_conf_project_rel_path))
                fixed_inputs.add(path.join(path.dirname(
                    build_conf_project_rel_path), input_src
                ))
            }
            templates[name]["inputs"] = fixed_inputs
        }
        queue.add(templates[name])
    }
    if queue.len == 0 {
        return later yes
    }
    var next_template = queue.pop()
    var result = apply_single_template(
        next_template["src-path"], next_template,
        verbose=verbose
    ) later:

    await result
    if not result {
        return later no
    }
    if queue.len == 0 {
        return later yes
    }
    next_template = queue.pop()
    result = apply_single_template(
        next_template["src-path"], next_template,
        verbose=verbose
    ) later repeat
}

func process_templates_for_ref_unsafe(
        ref, action, verbose=no
        ) {
    var where_uri = ref.location
    var where_prot = uri.get_protocol(where_uri)
    if not {"file", "vfs"}.has(where_prot.lower()) {
        print("horp: error: Can't process templates for package, "
            "since local install location wasn't found: " + ref.as_str())
        return later no
    }
    var pkg_folder = uri.to_file_or_vfs_path(where_uri)

    var processed_any_template = no
    func callback(file_entry) {
        if action == "apply" and (
                file_entry == "horp-build.conf" or
                file_entry.ends(path.sep + "horp-build.conf")) {
            var result = apply_templates_from_conf_file(
                path.make_abs(pkg_folder),
                path.join(pkg_folder, file_entry),
                file_entry, verbose=verbose
            ) later:

            await result
            if result == no {
                return no
            }
            return none
        } elseif action == "list" and
                file_entry.len > ".tmpl".len and
                file_entry.ends(".tmpl") {
            print("Template: " + file_entry)
            processed_any_template = yes
        }
        return later none
    }

    var success = package.do_for_all_files(callback, pkg_folder,
        allow_vfs=yes, allow_disk=yes,
        verbose=no) later:

    await success
    if not success {
        if action == "apply" {
            print("horp: error: Applying templates failed, "
                "either templates are malformed or "
                "there was a disk access error. For package: " +
                ref.as_str())
        } else {
            print("horp: error: File listing failed, "
                "is this package accessible on disk? For package: " +
                ref.as_str())
        }
        return later no
    }
    if not processed_any_template and action == "list" {
        print("horp: warning: No templates found!")
    }
    return later yes
}

func process_templates_for_ref(ref, action, verbose=no) {
    do {
        var result = process_templates_for_ref_unsafe(
            ref, action, verbose=verbose
        ) later:

        await result
        if not result {
            return no
        }
    } rescue any as e {
        print("horp: error: Failed to process templating for "
            "ref: " + ref.as_str())
        print("horp: error: Error details: " + e.as_str())
        return no
    }
    return yes
}

func process_templates_for_refs(refs, action, verbose=no) {
    var queue = refs.copy()
    if queue.len == 0 {
        return 0
    }
    var next_ref = queue.pop()
    var build_result = process_templates_for_ref(
        next_ref, action, verbose=verbose
    ) later:

    await build_result
    if not build_result {
        return 1
    }

    if queue.len == 0 {
        return 0
    }
    next_ref = queue.pop()
    build_result = process_templates_for_ref(
        next_ref
    ) later repeat
}

func actionparser_build_template(args, verbose=no) {
    var defs = argparse.ArgumentDefs(program_name="horp build template",
        description="Instead of running the full build actions, "
        "just run the templating build step on the given package "
        "directory.")
    defs.add_arg("action", description="Specify an action to execute, "
        "available choices being \"list\" (list the template files) and "
        "\"apply\" (write out the target files for the templates).")
    defs.add_arg(
        "package refs", description="The packages for which "
        "to handle the templates.")
    defs.add_switch("--verbose", description="Output extra information "
        "when doing things.")
    var result = argparse.parse(defs, args)
    if result.output != "" {
        print(result.output)
        return later result.exit_code
    }
    if result.args["--verbose"] {
        verbose = yes
    }
    var target_refs = ref.parse_and_populate_package_refs(
        result.args["package refs"], verbose=verbose
    ) later:

    do {
        await target_refs
    } rescue any as err {
        print("horp: error: Failed to resolve package refs: " +
            err.msg)
        print("Did you specify existing horp packages?")
        return 1
    }
    assert(target_refs != none)
    if not {"apply", "list"}.has(result.args["action"]) {
        print("horp: error: Unknown action \"" +
            result.args["action"] + "\".")
        print("Use horp build template --help to "
            "show available actions.")
        return later 1
    }
    var exit_code = process_templates_for_refs(
        target_refs, result.args["action"], verbose=verbose
    ) later:

    await exit_code
    return later exit_code
}

