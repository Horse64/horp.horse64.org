# Copyright (c) 2020-2022,  ellie/@ell1e & Horp Team (see AUTHORS.md).
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
# 1. Redistributions of source code must retain the above copyright notice,
#    this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright notice,
#    this list of conditions and the following disclaimer in the documentation
#    and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.
#
# Alternatively, at your option, this file is offered under the Apache 2
# license, see accompanied LICENSE.md.


import constraint


func test_verify_constraints_for_versions {
    var had_error, result

    had_error = no
    do {
        constraint.verify_constraints_for_versions(
            [constraint.Constraint(
             constraint.C_LESSER, "1.0")]
        )
    } rescue ValueError as e {
        had_error = yes
        assert(e.msg.lower().has("block latest version"))
        assert(e.msg.lower().has("constraint"))
    }
    assert(had_error)

    assert(constraint.verify_constraints_for_versions(
        [constraint.Constraint(
         constraint.C_EQUAL, "1.0")]
    ) == ["1.0"])
    #assert(constraint.verify_constraints_for_versions(
    #    [Constraint(constraint.C_GREATEREQUAL, "1.0"),
    #     Constraint(constraint.C_GREATEREQUAL, "1.1")]
    #) == ["1.1", "1.0"])
    #assert(constraint.verify_constraints_for_versions(
    #    [Constraint(constraint.C_GREATEREQUAL, "1.1"),
    #     Constraint(constraint.C_GREATEREQUAL, "1.0")]
    #) == ["1.1", "1.0"])
}

