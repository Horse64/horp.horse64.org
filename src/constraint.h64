# @module constraint
# Copyright (c) 2020-2022,  ellie/@ell1e & Horse64 Team (see AUTHORS.md).
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
# 1. Redistributions of source code must retain the above copyright notice,
#    this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright notice,
#    this list of conditions and the following disclaimer in the documentation
#    and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.
#
# Alternatively, at your option, this file is offered under the Apache 2
# license, see accompanied LICENSE.md.


type Constraint {
    var op
    var value
}


func Constraint.init(op, value) {
    self.op = op + ""
    self.value = value + ""
}


func Constraint.as_str() {
    return "Constraint(op='" + self.op +
        "', value='" + self.value + "')"
}


func Constraint.allows_version(version) {
    return yes
}


func guess_version_from_constraints(constraints) {
    # Try various constraint types, starting with most preferred:

    for constraint in constraints {  # This leaves no options anyway!
        if constraint.op == "==" {
            return constraint.op
        }
    }
    for constraint in constraints {  # We get the newest we can.
        if constraint.op == "<=" {
            return constraint.op
        }
    }
    for constraint in constraints {  # This might be an old one.
        if constraint.op == ">=" {
            return constraint.op
        }
    }
    return none
}


func check_constraints_valid(constraints) {
    constraint_ops_seen = {}
    for constraint in constraints {
        constraint_ops_seen.add(constraint.op)
    }

    if constraints.len > 0 {
        var version = guess_version_from_constraints(constraints)
        if version == none and (
                constraint_ops_seen.len != 1 or
                not constraint_ops_seen.has(">")) {
            throw new ValueError(
                "Constraints must not potentially block latest "
                "release without suggesting a working release. "
                "Try using an additional '>=' constraint?"
            )
        }
        #for constraint in constraints {
        #}
    }
}
